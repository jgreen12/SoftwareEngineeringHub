//Pseudo code for the Software Engineering Project. 
//Design Workflow portion
//Author: Joshua Green


begin class WeeklyServices
	struct ServiceItem{
		variable date
		variable provider
		variable service
	}
	
	file WeeklyServicesOutput

	begin public function void printWeeklyServices()
		/*called by system during Manager request to print the services 
		provided that week*/
		ServiceItem CurrentServiceItem
		
		
		open connection to ChocAnDatabase
		open ServicesRecord file
		begin loop do while( Not End of File && CurrentServiceItem date >= beginning of the week 
		&& CurrentServiceItem date <= end of the week)
			read file ServicesRecord line 1 store in CurrentServiceItem
			if (CurrentServiceItem CurrentServiceItem date >= beginning of the week 
			&& CurrentServiceItem date <= end of the week)
				if (file WeeklyServicesOutput does not exist)
					new file WeeklyServicesOutput
				open file WeeklyServicesOutput
				append CurrentServiceItem to file WeeklyServicesOutput
			end if
		end loop
		if (file WeeklyServicesOutput is open)
			close file WeeklyServicesOutput
		close ServicesRecord file
		close connection to ChocAnDatabase
		print(WeeklyServicesOutput)
	end printWeeklyServices
end WeeklyServices


begin class Print
	begin public function printData(file item)
		open file item
		ServiceItem CurrentServiceItem  
		
		begin loop do while(not end of file)
			CurrentServiceItem equal to current line
			output CurrentServiceItem
			go to next line
		end loop
		close file item
	end PrintData
end Print


begin class Services
	/* Contains functions to list services and request them */
	begin public function RequestServices()
		/* called when a user requests services*/
		ListServices()
		input user's choice
		sendMessage(provider of service ID, userID, ServiceItem)
		updateAccount(add, fees)
		/*called from account class*/
	end function RequestServices
	
	begin private function ListServices()
		begin loop for (number of services available)
			output services on screen
		end loop
	end function ListServices
end Services

begin class Message
	public function sendMessage(Message MessageItem)
		open messages file
		write MessageItem to file
		close messages file
	end sendMessage
	
	public function receiveMessage(userID)
		open messages file
		open myMessages file
		begin loop while(not end of file)
			find items with matching userID in To field
			append items to myMessages file
		end loop
		close myMessages file
		close messages file
		
	end receiveMessage
	
	public function printMessages()
		open myMessages file
		begin loop while(not end of file)
			print items in myMessages file
		end loop
		close myMessages file
	end printMessage
end Message

begin class PayFee
	
	begin public function viewFees()
		open connection to ChocAnDatabase
		find fees that the user owes based on userID
		output fees to the user
		close connection to ChocAnDatabase
	end viewFees
	
	begin public function paySelectFees()
		viewFees()
		/*fees ouputted to screen for user via the function call above*/
		user selects fees to pay
		updateAccount(remove, fees)
		/*update account function from Accountin class*/
	end paySelectFees
end PayFee

begin class Accounting
	file AccountLog
	begin public function updateAccount(action, fees)
		/*possible actions should be add or remove, 
			code representation could be int 0 or 1 or string for readability*/
		begin if(action is add)
			open file User'sAccount
			add items to file 
			close file User'sAccount
		end if
		begin else
			open file User'sAccount
			find matching item code
			remove items
			close file User'sAccount
			add items to AccountLog 
		end else		
	end updateAccount
	
	begin accountProcedure()
		/*this is only called on Friday nights by the main system*/
		open file AccountLog
		read items from AccountLog
		create ETF data from items and user information
		open file ServicesRecord
		update file ServicesRecord 
		open file ServicesRecord
		remove items from AccountLog
		close file AccountLog		
	end accountProcedure
end Accounting
